SELECT,FROM,WHERE,LIKE,CREATE,ALTER,DROP,INSERT,UPDATE,DELETE,TRUNCATE,COMMIT,ROLLBACK,AND,OR,=,<>.!=,IS NULL,IS NOT NULL,(),DISTINCT,IN,NOT IN,BETWEEN,NOT BETWEEN,ALL,ANY,ORDER BY ASC/DESC,UNION,UNION ALL,INTERSECT,MINUS,COUNT,GROUP BY,HAVING,SUM,MAX,MIN,AVG,AS,JOIN,LEFT JOIN,RIGHT JOIN,FULL JOIN,NATURAL JOIN,CROSS JOIN,ON,INSTR,LENGTH,SUBSTR,ROUND,CEIL,FLOOR,SYSDATE,ADD_MONTHS,MONTHS_BETWEEN,TO_CHAR,TO_NUMBER,TO_DATE,CASE

LIKE-to turn on: % _
DISTINCT-remove duplicated records,no duplicated column values
IN=like WHERE but for multiple-WHERE last_name IN ('Foster', 'Elliott', 'Mitchell', 'Perry', 'Lawson')
BETWEEN/NOT BETWEEN-when we look a value in a range date or number
ALL-for multiple-WHERE salary > ALL (30000, 40000, 50000);
ANY-for multiple-WHERE salary = ANY (30000, 40000, 50000);
ORDER BY ASC/DESC-ORDER BY hire_date ASC, employee_id DESC;
UNION-combines the results of two sets,and removes duplicate records
UNION ALL-combines all results of sets and show all of them,duplicates are kept
INTERSECT-like UNION but show only the duplicates records of sets
MINUS-in the 1st set we remove the duplicated records between the 1st and the 2nd set
COUNT-count of a records 
GROUP BY-show me these values and the count of each of these values
HAVING-simular to WHERE,but WHERE works only at the start of a query and HAVING is for the end of the query
SUM-the sum of all records of something-number
MIN-find the highest of maximum value-number,data,string
MAX-find the lowest or minumum value-number,data,string
AVG-finds the avarage value of a range of values-number
AS-rename column name
ON-works when joining multi 
INSTR-in a string at what number position a char is located/INSTR(email_address, '@')//8
LENGTH-lenght of something 
SUBSTR-gets a the part of a string/SUBSTR(email_address, INSTR(email_address, '@'), 100)
ROUND-rounds to the nearest whole number or specified decimal places/ROUND(price, 1)/ROUND(price * 9 * 0.85, 2)
CEIL-rounds up to nearest whole number. Short for "ceiling"/CEIL(price)
FLOOR-rounds down to nearest whole number/FLOOR(price)
TRUNCATE-empty the whole database//it auto commit so careful



- Alieses-shorter names for tables-like init   variable:  
SELECT employee_id, first_name, last_name, e.salary//e.salary
FROM employee e;//e

- Joins-it allow up to link 2 tables together in a single query

INNER JOIN(JOIN)-simular to UNION,but this is two tables,not two queries/combines the results of two sets,and removes duplicate records in 1 query instead of 2
LEFT JOIN - combines the results of two sets/from 2 tables shows table 1 + table 2 matches and the rest from table 2 that doesnt match table 1 its removed
RIGHT JOIN-reversed to LEFT JOIN - everything goes to the right to table 2 and the rest from table 1 its removed
FULL JOIN-combines 2 tables into 1 entirely 
NATURAL JOIN-NOT RECOMMEND TO USE-2 tables joined on columns that have the same name
CROSS JOIN-rearly used-every record in one table is joined to every record in another table

Self(JOIN) - join a table to ifself(only 1 table),combine in 1 col all managers and employee/
Joining Many Tables- with ON,

- Functions: SUM,COUNT,AVG,MIN,MAX,INSTR,LENGTH,ROUND,CEIL,FLOOR

--- DateTime:
- SYSDATE: gets the current date/SELECT SYSDATE
- ADD_MONTHS: adds a number of months to a date value//ADD_MONTHS(hire_date, 6) AS review_date//adds new review_date 6 months after hire_date
- MONTHS_BETWEEN: finds the difference between two date values/MONTHS_BETWEEN(SYSDATE, hire_date)/12 AS time_with_company//5.4 years

- CASE-if/then,else//when something add to price_group the string
CASE
WHEN price > 100 THEN 'Over 100'
WHEN price <= 100 THEN 'Less than or under 100'
END price_group




1.View everything:
SELECT *
FROM department;



Example UNION,UNION ALL,INTERSECT,MINUS:

- Query A has records 1, 2, 3, 4
- Query B has records 2, 4, 6, 8, 9

- UNION: 1, 2, 3, 4, 6, 8, 9
- UNION ALL: 1, 2, 2, 3, 4, 4, 6, 8, 9
- INTERSECT: 2, 4
- MINUS: 1, 3



Common Data Types:
Use TO_ to use them:

• CHAR: character string with fixed size
• VARCHAR2: character string with a variable size
• NUMBER: stores numeric data with optional decimals
• DATE: stores date and time
• TIMESTAMP: stores date, time, and fractional seconds
• CLOB: stores large amounts of text

TO_CHAR(hire_date, 'YYYY_MM_DD')-convert to a different format
SELECT TO_NUMBER('200')-convert to number
SELECT TO_DATE('2017_05_28', 'YYYY_MM_DD')-convert to a date

COMMIT;-commit changes 	

ROLLBACK;-revert query

